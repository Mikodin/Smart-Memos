import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";

dotenv.config();

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const copy_to_plugins = {
	name: 'copy_to_plugins',
	setup(build) {
		if(process.env.OBSIDIAN_PLUGINS_PATH) {
		build.onEnd(() => {
			const plugin_path = path.join(process.env.OBSIDIAN_PLUGINS_PATH, "smart-memos");
			
			if (!fs.existsSync(plugin_path)) {
				fs.mkdirSync(plugin_path);
			}
			
			fs.copyFileSync("./build/main.js", path.join(plugin_path, "main.js"));
			fs.copyFileSync("./manifest.json", path.join(plugin_path, "manifest.json"));
			fs.copyFileSync("./src/styles.css", path.join(plugin_path, "styles.css"));
			// add empty .hotreload file
			fs.writeFileSync(path.join(plugin_path, ".hotreload"), "");
			
			console.log("Plugin built and copied to obsidian plugins folder");
		});
		}

		if(!process.env.OBSIDIAN_PLUGINS_PATH) {
		build.onEnd(() => {
			
			fs.copyFileSync("./manifest.json", "build/manifest.json");
			fs.copyFileSync("./src/styles.css", "build/styles.css");
			
			console.log("Plugin built and copied to build folder");
		});
		}
	}
};
const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["./src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: "inline",
	treeShaking: true,
	outfile: "build/main.js",
	plugins: [
		copy_to_plugins
	]
});
if(!prod) await context.watch();
else {
	await context.rebuild();
	process.exit(0);
}

